import api from './api';
import type { Event } from '@/models/event';
import allEvents from '@/mockups/allEvents';

export type MessageType = 'text' | 'eventSuggestion';

export interface EventSuggestion {
  id: string;
  title: string;
  datetime: string;
  imageUrl?: string;
  location?: string;
}

export interface Message {
  id: string;
  content: string;
  type: MessageType;
  isUser: boolean;
  timestamp: Date;
  eventSuggestion?: EventSuggestion;
}

export interface ChatSession {
  id: string;
  messages: Message[];
  createdAt: Date;
  updatedAt: Date;
}

export interface QuickReplyOption {
  id: string;
  text: string;
}

const USE_MOCK = true;
const TYPING_DELAY = 1000;

const BOT_RESPONSES = {
  GREETING: [
    'Hola! ¬øEn qu√© puedo ayudarte hoy?',
    '¬°Bienvenido! Soy Sammy, tu asistente personal.',
    '¬°Hola! ¬øNecesitas ayuda con alg√∫n evento?'
  ],
  NOT_UNDERSTOOD: [
    'Disculpa, no he entendido tu consulta. ¬øPuedes reformularla?',
    'No estoy seguro de lo que necesitas. ¬øPuedes ser m√°s espec√≠fico?',
    'Perdona, pero no he captado bien tu pregunta. ¬øMe explicas de otra manera?'
  ],
  EVENT_INTRO: [
    'Claro, aqu√≠ tienes un evento que podr√≠a interesarte:',
    'He encontrado este evento para ti:',
    'Mira este evento, creo que te gustar√°:'
  ],
  HELP_OPTIONS: 'Puedo ayudarte a encontrar eventos, cambiar contrase√±a, comprar entradas, editar eventos o acceder a estad√≠sticas. ¬øQu√© necesitas?',
  THANKS: 'De nada! ¬øHay algo m√°s en lo que pueda ayudarte?',
  PASSWORD_CHANGE: 'Para cambiar tu contrase√±a, sigue estos pasos:\n\n1. Ve a tu perfil haciendo clic en el bot√≥n "Perfil" en la barra de navegaci√≥n\n2. En la p√°gina de perfil, busca el bot√≥n "Cambiar Contrase√±a"\n3. Ingresa tu contrase√±a actual y la nueva contrase√±a\n4. Confirma la nueva contrase√±a\n5. Haz clic en "Guardar"',
  BUY_TICKETS: 'Para comprar entradas a un evento:\n\n1. Encuentra el evento que te interesa en la p√°gina principal o mediante b√∫squeda\n2. Haz clic en el evento para ver los detalles\n3. Selecciona la cantidad de entradas que deseas\n4. Haz clic en "Comprar Entradas"\n5. Completa la informaci√≥n de pago\n6. Recibir√°s un correo electr√≥nico con tu confirmaci√≥n',
  TERMS_CONDITIONS: 'Para ver los t√©rminos y condiciones:\n\n1. Despl√°zate hasta la barra de navegacion en cualquier p√°gina\n2. Haz clic en "Pol√≠ticas" o "T√©rminos de uso"\n3. All√≠ encontrar√°s toda la informaci√≥n legal sobre el uso de la plataforma',
  EDIT_EVENT: 'Para editar un evento (solo disponible para administradores):\n\n1. Ve a "Mis Eventos" en la barra de navegaci√≥n\n2. Encuentra el evento que deseas modificar\n3. Haz clic en el evento para ver sus detalles\n4. Busca la opci√≥n "Editar" en la parte inferior\n5. Realiza los cambios necesarios y guarda',
  VIEW_STATS: 'Para ver las estad√≠sticas de tus eventos (solo disponible para administradores):\n\n1. Ve a la p√°gina principal cuando est√©s logueado como administrador\n2. Busca y haz clic en el bot√≥n "Ver estad√≠sticas"\n3. All√≠ podr√°s ver datos sobre asistencia, ventas y engagement de tus eventos'
};

const KEYWORDS = {
  EVENTS: ['evento', 'eventos', 'actividad', 'actividades', 'fiesta', 'concierto', 'show', 'recomendar'],
  GREETINGS: ['hola', 'hey', 'saludos', 'buenas', 'buenos d√≠as', 'buenas tardes', 'buenas noches'],
  THANKS: ['gracias', 'te lo agradezco', 'muchas gracias', 'thank', 'thanks'],
  HELP: ['ayuda', 'ayudar', 'informaci√≥n', 'info', 'preguntas', 'pregunta', 'dudas', 'duda'],
  PASSWORD: ['contrase√±a', 'password', 'clave', 'cambiar contrase√±a', 'cambiar clave', 'cambiar password', 'olvid√©', 'olvide', 'olvidar'],
  TICKETS: ['entrada', 'entradas', 'ticket', 'tickets', 'comprar', 'reservar', 'adquirir', 'pago'],
  TERMS: ['t√©rminos', 'condiciones', 'pol√≠ticas', 'privacidad', 'legal', 'normas', 'reglas'],
  EDIT: ['editar', 'modificar', 'cambiar', 'actualizar', 'evento'],
  STATS: ['estad√≠sticas', 'stats', 'estad√≠stica', 'm√©tricas', 'datos', 'analytics', 'reportes', 'ventas']
};

function containsKeyword(message: string, keywordArray: string[]): boolean {
  for (let i = 0; i < keywordArray.length; i++) {
    if (message.includes(keywordArray[i])) {
      return true;
    }
  }
  return false;
}

const getRandomElement = <T>(array: T[]): T => {
    return array[Math.floor(Math.random() * array.length)];
};

const chatService = {
  startSession: async function(): Promise<ChatSession> {
    const welcomeMessage: Message = {
      id: Date.now().toString(),
      content: 'Hola! Soy Sammy üëã Tu asistente personal. ¬øC√≥mo puedo ayudarte?',
      type: 'text',
      isUser: false,
      timestamp: new Date()
    };
    
    const sessionId = 'session-' + Date.now().toString();
    const newSession: ChatSession = {
      id: sessionId,
      messages: [welcomeMessage],
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    if (!USE_MOCK) {
      try {
        const response = await api.post('/chat/sessions', {
          sessionId,
          timestamp: newSession.createdAt
        });
        
        if (response.data && response.data.id) {
          return response.data;
        }
      } catch (error) {
        console.error('Error creating chat session:', error);
      }
    }
    
    return newSession;
  },
  
  sendMessage: async function(message: string, currentSession: ChatSession): Promise<{
    response: Message,
    typingDelay: number
  }> {
    if (!USE_MOCK) {
      try {
        const response = await api.post('/chat/message', {
          sessionId: currentSession.id,
          message,
          timestamp: new Date()
        });
        
        if (response.data && response.data.response) {
          return {
            response: response.data.response,
            typingDelay: response.data.typingDelay || TYPING_DELAY
          };
        }
      } catch (error) {
        console.error('Error sending message to chat API:', error);
      }
    }
    
    return this.generateResponse(message, currentSession);
  },
  
  generateResponse: async function(message: string, session: ChatSession): Promise<{
    response: Message,
    typingDelay: number
  }> {
    const lowercaseMessage = message.toLowerCase();
    let responseContent = '';
    let responseType: MessageType = 'text';
    let typingDelay = TYPING_DELAY;
    let eventSuggestion: EventSuggestion | undefined;
    
    if (containsKeyword(lowercaseMessage, KEYWORDS.GREETINGS)) {
      responseContent = getRandomElement(BOT_RESPONSES.GREETING);
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.EVENTS)) {
      responseContent = getRandomElement(BOT_RESPONSES.EVENT_INTRO);
      responseType = 'eventSuggestion';
      
      const suggestedEvent = await this.getSuggestedEvent(lowercaseMessage);
      eventSuggestion = {
        id: suggestedEvent.id,
        title: suggestedEvent.title,
        datetime: `${suggestedEvent.date || ''} - ${suggestedEvent.time || ''}`,
        imageUrl: suggestedEvent.image,
        location: suggestedEvent.location
      };
      
      typingDelay = 1500;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.PASSWORD)) {
      responseContent = BOT_RESPONSES.PASSWORD_CHANGE;
      typingDelay = 1500;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.TICKETS)) {
      responseContent = BOT_RESPONSES.BUY_TICKETS;
      typingDelay = 1500;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.TERMS)) {
      responseContent = BOT_RESPONSES.TERMS_CONDITIONS;
      typingDelay = 1200;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.EDIT)) {
      responseContent = BOT_RESPONSES.EDIT_EVENT;
      typingDelay = 1500;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.STATS)) {
      responseContent = BOT_RESPONSES.VIEW_STATS;
      typingDelay = 1200;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.HELP)) {
      responseContent = BOT_RESPONSES.HELP_OPTIONS;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.THANKS)) {
      responseContent = BOT_RESPONSES.THANKS;
    }
    else {
      responseContent = getRandomElement(BOT_RESPONSES.NOT_UNDERSTOOD);
    }
    
    const response: Message = {
      id: Date.now().toString(),
      content: responseContent,
      type: responseType,
      isUser: false,
      timestamp: new Date(),
      eventSuggestion
    };
    
    return { response, typingDelay };
  },
  
  getSuggestedEvent: async function(message: string): Promise<Event> {
    const keywords: string[] = [];
    const words = message.toLowerCase().split(' ');
    
    for (let i = 0; i < words.length; i++) {
      const word = words[i].trim();
      if (word.length > 3) {
        keywords.push(word);
      }
    }
    
    if (USE_MOCK) {
      const matchingEvents: Event[] = [];
      
      for (let i = 0; i < allEvents.length; i++) {
        const event = allEvents[i];
        const eventText = (
          event.title.toLowerCase() + ' ' +
          event.description.toLowerCase() + ' ' +
          event.category.toLowerCase()
        );
        
        for (let j = 0; j < keywords.length; j++) {
          if (eventText.includes(keywords[j])) {
            matchingEvents.push(event);
            break;
          }
        }
      }
      
      if (matchingEvents.length > 0) {
        return matchingEvents[Math.floor(Math.random() * matchingEvents.length)];
      }
      
      return allEvents[Math.floor(Math.random() * allEvents.length)];
    }
    
    try {
      const response = await api.get(`/events/suggest?keywords=${keywords.join(',')}`);
      return response.data;
    } catch (error) {
      console.error('Error getting event suggestion:', error);
      return allEvents[Math.floor(Math.random() * allEvents.length)];
    }
  },
  
  getQuickReplies: async function(session: ChatSession): Promise<QuickReplyOption[]> {
    if (!USE_MOCK) {
      try {
        const response = await api.post('/chat/suggestions', {
          sessionId: session.id,
          lastMessages: session.messages.slice(-3)
        });
        
        if (response.data && Array.isArray(response.data)) {
          return response.data;
        }
      } catch (error) {
        console.error('Error getting quick reply suggestions:', error);
      }
    }
    
    return [
      { id: '1', text: 'Recomendar eventos' },
      { id: '2', text: '¬øC√≥mo cambiar mi contrase√±a?' },
      { id: '3', text: '¬øC√≥mo comprar entradas?' },
      { id: '4', text: '¬øD√≥nde ver t√©rminos y condiciones?' },
      { id: '5', text: '¬øC√≥mo editar un evento?' },
      { id: '6', text: '¬øC√≥mo ver estad√≠sticas?' }
    ];
  },
  
  saveSession: async function(session: ChatSession): Promise<boolean> {
    if (!USE_MOCK) {
      try {
        await api.put(`/chat/sessions/${session.id}`, {
          messages: session.messages,
          updatedAt: new Date()
        });
        return true;
      } catch (error) {
        console.error('Error saving chat session:', error);
        return false;
      }
    }
    
    return true;
  },

  loadSession: async function(sessionId: string): Promise<ChatSession | null> {
    if (!USE_MOCK) {
      try {
        const response = await api.get(`/chat/sessions/${sessionId}`);
        if (response.data && response.data.id) {
          return response.data;
        }
      } catch (error) {
        console.error('Error loading chat session:', error);
      }
    }
    
    return null;
  }
};

export default chatService;