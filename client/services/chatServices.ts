import type { Event } from '@/models/event';
import allEvents from '@/mockups/allEvents';

export type MessageType = 'text' | 'eventSuggestion';

export interface EventSuggestion {
  id: string;
  title: string;
  datetime: string;
  imageUrl?: string;
  location?: string;
}

export interface Message {
  id: string;
  content: string;
  type: MessageType;
  isUser: boolean;
  timestamp: Date;
  eventSuggestion?: EventSuggestion;
}

export interface ChatSession {
  id: string;
  messages: Message[];
  createdAt: Date;
  updatedAt: Date;
  userId?: string;
}

export interface QuickReplyOption {
  id: string;
  text: string;
}

const TYPING_DELAY = 1000;

const BOT_RESPONSES = {
  GREETING: [
    'Hola! Â¿En quÃ© puedo ayudarte hoy?',
    'Â¡Bienvenido! Soy Sammy, tu asistente personal.',
    'Â¡Hola! Â¿Necesitas ayuda con algÃºn evento?'
  ],
  NOT_UNDERSTOOD: [
    'Disculpa, no he entendido tu consulta. Â¿Puedes reformularla?',
    'No estoy seguro de lo que necesitas. Â¿Puedes ser mÃ¡s especÃ­fico?',
    'Perdona, pero no he captado bien tu pregunta. Â¿Me explicas de otra manera?'
  ],
  EVENT_INTRO: [
    'Claro, aquÃ­ tienes un evento que podrÃ­a interesarte:',
    'He encontrado este evento para ti:',
    'Mira este evento, creo que te gustarÃ¡:'
  ],
  HELP_OPTIONS: 'Puedo ayudarte a encontrar eventos, cambiar contraseÃ±a, comprar entradas, editar eventos o acceder a estadÃ­sticas. Â¿QuÃ© necesitas?',
  THANKS: 'De nada! Â¿Hay algo mÃ¡s en lo que pueda ayudarte?',
  PASSWORD_CHANGE: 'Para cambiar tu contraseÃ±a, sigue estos pasos:\n\n1. Ve a tu perfil haciendo clic en el botÃ³n "Perfil" en la barra de navegaciÃ³n\n2. En la pÃ¡gina de perfil, busca el botÃ³n "Cambiar ContraseÃ±a"\n3. Ingresa tu contraseÃ±a actual y la nueva contraseÃ±a\n4. Confirma la nueva contraseÃ±a\n5. Haz clic en "Guardar"',
  PROFILE_PHOTO: 'Para cambiar tu foto de perfil:\n\n1. Ve a la secciÃ³n de "Perfil" en el menÃº principal\n2. Selecciona "Editar perfil"\n3. Haz clic en la imagen o el Ã­cono\n4. Selecciona  "Subir imagen"\n5. Escoge una nueva imagen de tu dispositivo\n6. Guarda los cambios',
  BUY_TICKETS: 'Para comprar entradas a un evento:\n\n1. Encuentra el evento que te interesa en la pÃ¡gina principal o mediante bÃºsqueda\n2. Haz clic en el evento para ver los detalles\n3. Selecciona la cantidad de entradas que deseas\n4. Haz clic en "Comprar Entradas"\n5. Completa la informaciÃ³n de pago\n6. RecibirÃ¡s un correo electrÃ³nico con tu confirmaciÃ³n',
  TERMS_CONDITIONS: 'Para ver los tÃ©rminos y condiciones:\n\n1. DesplÃ¡zate hasta la barra de navegacion en cualquier pÃ¡gina\n2. Haz clic en "PolÃ­ticas" o "TÃ©rminos de uso"\n3. TambiÃ©n puedes acceder directamente desde la URL: /policies\n4. AllÃ­ encontrarÃ¡s toda la informaciÃ³n legal sobre el uso de la plataforma',
  CREATE_EVENT: 'Para crear un nuevo evento (disponible para administradores):\n\n1. Ingresa a tu cuenta como administrador\n2. En la pÃ¡gina principal, busca el botÃ³n "Crear evento"\n3. Completa todos los campos requeridos: tÃ­tulo, descripciÃ³n, fecha, etc.\n4. AÃ±ade una imagen promocional del evento\n5. Configura los detalles de disponibilidad y precios\n6. Haz clic en "Publicar Evento"',
  EDIT_EVENT: 'Para editar un evento (solo disponible para administradores):\n\n1. Ve a "Mis Eventos" en la barra de navegaciÃ³n\n2. Encuentra el evento que deseas modificar\n3. Haz clic en el evento para ver sus detalles\n4. Busca la opciÃ³n "Editar" en la parte inferior\n5. Realiza los cambios necesarios y guarda',
  VIEW_STATS: 'Para ver las estadÃ­sticas de tus eventos (solo disponible para administradores):\n\n1. Ve a la pÃ¡gina principal cuando estÃ©s logueado como administrador\n2. Busca y haz clic en el botÃ³n "Ver estadÃ­sticas"\n3. AllÃ­ podrÃ¡s ver datos sobre asistencia, ventas y engagement de tus eventos',
  CONTACT: 'Si necesitas contactarnos directamente, puedes escribirnos a:\n\nlogieventsofficial@gmail.com\n\nNuestro horario de atenciÃ³n es de lunes a viernes de 8:00 AM a 5:00 PM (hora local de Costa Rica).'
};

const KEYWORDS = {
  EVENTS: ['evento', 'eventos', 'actividad', 'actividades', 'fiesta', 'concierto', 'show', 'recomendar', 'sugerir', 'buscar'],
  GREETINGS: ['hola', 'hey', 'saludos', 'buenas', 'buenos dÃ­as', 'buenas tardes', 'buenas noches'],
  THANKS: ['gracias', 'te lo agradezco', 'muchas gracias', 'thank', 'thanks'],
  HELP: ['ayuda','que haces','preguntas', 'ayudar', 'informaciÃ³n', 'info', 'preguntas', 'pregunta', 'dudas', 'duda'],
  PASSWORD: ['contraseÃ±a', 'password', 'clave', 'cambiar contraseÃ±a', 'cambiar clave', 'cambiar password', 'olvidÃ©', 'olvide', 'olvidar'],
  PROFILE_PHOTO: ['foto', 'perfil', 'imagen', 'cambiar foto', 'actualizar foto', 'subir foto', 'cambiar imagen', 'avatar'],
  TICKETS: ['entrada', 'entradas', 'ticket', 'tickets', 'comprar', 'reservar', 'adquirir', 'pago'],
  TERMS: ['tÃ©rminos', 'condiciones', 'polÃ­ticas', 'privacidad', 'legal', 'normas', 'reglas'],
  CREATE: ['crear', 'nuevo', 'aÃ±adir', 'agregar', 'publicar', 'generar'],
  EDIT: ['editar', 'modificar', 'cambiar', 'actualizar', 'evento'],
  STATS: ['estadÃ­sticas', 'stats', 'estadÃ­stica', 'mÃ©tricas', 'datos', 'analytics', 'reportes', 'ventas'],
  CONTACT: ['contacto', 'correo', 'email', 'telÃ©fono', 'llamar', 'mensaje', 'contactar', 'soporte', 'ayuda tÃ©cnica']
};

function containsKeyword(message: string, keywordArray: string[]): boolean {
  const lowercaseMessage = message.toLowerCase();
  return keywordArray.some(keyword => lowercaseMessage.includes(keyword));
}

const getRandomElement = <T>(array: T[]): T => {
  return array[Math.floor(Math.random() * array.length)];
};

const activeSessions: Record<string, ChatSession> = {};

const chatService = {
  startSession: async function(userId?: string): Promise<ChatSession> {
    const welcomeMessage: Message = {
      id: Date.now().toString(),
      content: 'Hola! Soy Sammy ðŸ‘‹ Tu asistente personal. Â¿CÃ³mo puedo ayudarte?',
      type: 'text',
      isUser: false,
      timestamp: new Date()
    };
    
    const sessionId = 'session-' + Date.now().toString();
    const newSession: ChatSession = {
      id: sessionId,
      messages: [welcomeMessage],
      createdAt: new Date(),
      updatedAt: new Date(),
      userId: userId
    };
    
    activeSessions[sessionId] = newSession;
    
    return newSession;
  },
  
  sendMessage: async function(message: string, currentSession: ChatSession): Promise<{
    response: Message,
    typingDelay: number
  }> {
    currentSession.updatedAt = new Date();
    
    return this.generateResponse(message, currentSession);
  },
  
  generateResponse: async function(message: string, session: ChatSession): Promise<{
    response: Message,
    typingDelay: number
  }> {
    const lowercaseMessage = message.toLowerCase();
    let responseContent = '';
    let responseType: MessageType = 'text';
    let typingDelay = TYPING_DELAY;
    let eventSuggestion: EventSuggestion | undefined;
    
    if (containsKeyword(lowercaseMessage, KEYWORDS.GREETINGS)) {
      responseContent = getRandomElement(BOT_RESPONSES.GREETING);
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.EVENTS)) {
      responseContent = getRandomElement(BOT_RESPONSES.EVENT_INTRO);
      responseType = 'eventSuggestion';
      
      const suggestedEvent = await this.getSuggestedEvent(lowercaseMessage);
      eventSuggestion = {
        id: suggestedEvent.id,
        title: suggestedEvent.title,
        datetime: `${suggestedEvent.date || ''} - ${suggestedEvent.time || ''}`,
        imageUrl: suggestedEvent.image,
        location: suggestedEvent.location
      };
      
      typingDelay = 1500;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.PASSWORD)) {
      responseContent = BOT_RESPONSES.PASSWORD_CHANGE;
      typingDelay = 1500;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.PROFILE_PHOTO)) {
      responseContent = BOT_RESPONSES.PROFILE_PHOTO;
      typingDelay = 1500;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.TICKETS)) {
      responseContent = BOT_RESPONSES.BUY_TICKETS;
      typingDelay = 1500;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.TERMS)) {
      responseContent = BOT_RESPONSES.TERMS_CONDITIONS;
      typingDelay = 1200;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.CREATE) && containsKeyword(lowercaseMessage, KEYWORDS.EVENTS)) {
      responseContent = BOT_RESPONSES.CREATE_EVENT;
      typingDelay = 1500;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.EDIT)) {
      responseContent = BOT_RESPONSES.EDIT_EVENT;
      typingDelay = 1500;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.STATS)) {
      responseContent = BOT_RESPONSES.VIEW_STATS;
      typingDelay = 1200;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.CONTACT)) {
      responseContent = BOT_RESPONSES.CONTACT;
      typingDelay = 1000;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.HELP)) {
      responseContent = BOT_RESPONSES.HELP_OPTIONS;
    }
    else if (containsKeyword(lowercaseMessage, KEYWORDS.THANKS)) {
      responseContent = BOT_RESPONSES.THANKS;
    }
    else {
      responseContent = getRandomElement(BOT_RESPONSES.NOT_UNDERSTOOD);
    }
    
    // Create response message
    const response: Message = {
      id: Date.now().toString(),
      content: responseContent,
      type: responseType,
      isUser: false,
      timestamp: new Date(),
      eventSuggestion
    };
    
    return { response, typingDelay };
  },
  
  getSuggestedEvent: async function(message: string): Promise<Event> {
    const keywords: string[] = [];
    const words = message.toLowerCase().split(' ');
    
    for (let word of words) {
      word = word.trim();
      if (word.length > 3) {
        keywords.push(word);
      }
    }
    
    const matchingEvents: Event[] = [];
    
    for (let event of allEvents) {
      const eventText = (
        event.title.toLowerCase() + ' ' +
        event.description.toLowerCase() + ' ' +
        event.category.toLowerCase()
      );
      
      for (let keyword of keywords) {
        if (eventText.includes(keyword)) {
          matchingEvents.push(event);
          break;
        }
      }
    }
    
    if (matchingEvents.length > 0) {
      return matchingEvents[Math.floor(Math.random() * matchingEvents.length)];
    }
    
    return allEvents[Math.floor(Math.random() * allEvents.length)];
  },
  
  getQuickReplies: async function(session: ChatSession): Promise<QuickReplyOption[]> {
    const standardReplies = [
      { id: '1', text: 'Â¿Eventos recomendados?' },
      { id: '2', text: 'Â¿CÃ³mo cambiar mi contraseÃ±a?' },
      { id: '3', text: 'Â¿CÃ³mo cambiar mi foto de perfil?' },
      { id: '4', text: 'Â¿CÃ³mo comprar entradas?' },
      { id: '5', text: 'Â¿DÃ³nde ver tÃ©rminos y condiciones?' },
      { id: '6', text: 'Â¿CÃ³mo crear un evento?' },
      { id: '7', text: 'Â¿CÃ³mo editar un evento?' },
      { id: '8', text: 'Â¿CÃ³mo ver estadÃ­sticas?' },
      { id: '9', text: 'Contacto de soporte' }
    ];
    
    const shuffledReplies = [...standardReplies].sort(() => 0.5 - Math.random());
    return shuffledReplies.slice(0, 4);
  },
  
  saveSession: async function(session: ChatSession): Promise<boolean> {
    activeSessions[session.id] = session;
    return true;
  },

  loadSession: async function(sessionId: string): Promise<ChatSession | null> {
    return activeSessions[sessionId] || null;
  },
  
  clearAllSessions: async function(): Promise<boolean> {
    for (const key in activeSessions) {
      delete activeSessions[key];
    }
    return true;
  }
};

export default chatService;